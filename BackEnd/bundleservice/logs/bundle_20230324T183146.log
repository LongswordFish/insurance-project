2023-03-24 18:31:48 [main] INFO  c.c.b.BundleserviceApplication -
				Starting BundleserviceApplication using Java 17.0.5 with PID 21584 (C:\CGI\Stack\GITPARTS\bundleservice\target\classes started by vipul.darji in C:\CGI\Stack\GITPARTS\bundleservice)
2023-03-24 18:31:48 [main] INFO  c.c.b.BundleserviceApplication -
				No active profile set, falling back to 1 default profile: "default"
2023-03-24 18:31:49 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate -
				Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2023-03-24 18:31:49 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate -
				Finished Spring Data repository scanning in 187 ms. Found 1 MongoDB repository interfaces.
2023-03-24 18:31:50 [main] INFO  o.s.cloud.context.scope.GenericScope -
				BeanFactory id=cd72953c-5208-3717-8d99-6a1cc4919195
2023-03-24 18:31:51 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer -
				Tomcat initialized with port(s): 9095 (http)
2023-03-24 18:31:51 [main] INFO  o.a.coyote.http11.Http11NioProtocol -
				Initializing ProtocolHandler ["http-nio-9095"]
2023-03-24 18:31:51 [main] INFO  o.a.catalina.core.StandardService -
				Starting service [Tomcat]
2023-03-24 18:31:51 [main] INFO  o.a.catalina.core.StandardEngine -
				Starting Servlet engine: [Apache Tomcat/10.1.5]
2023-03-24 18:31:51 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] -
				Initializing Spring embedded WebApplicationContext
2023-03-24 18:31:51 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext -
				Root WebApplicationContext: initialization completed in 3117 ms
2023-03-24 18:31:52 [main] INFO  org.mongodb.driver.client -
				MongoClient with metadata {"driver": {"name": "mongo-java-driver|sync|spring-boot", "version": "4.8.2"}, "os": {"type": "Windows", "name": "Windows 10", "architecture": "amd64", "version": "10.0"}, "platform": "Java/Eclipse Adoptium/17.0.5+8"} created with settings MongoClientSettings{readPreference=primary, writeConcern=WriteConcern{w=null, wTimeout=null ms, journal=null}, retryWrites=true, retryReads=true, readConcern=ReadConcern{level=null}, credential=null, streamFactoryFactory=null, commandListeners=[], codecRegistry=ProvidersCodecRegistry{codecProviders=[ValueCodecProvider{}, BsonValueCodecProvider{}, DBRefCodecProvider{}, DBObjectCodecProvider{}, DocumentCodecProvider{}, CollectionCodecProvider{}, IterableCodecProvider{}, MapCodecProvider{}, GeoJsonCodecProvider{}, GridFSFileCodecProvider{}, Jsr310CodecProvider{}, JsonObjectCodecProvider{}, BsonCodecProvider{}, EnumCodecProvider{}, com.mongodb.Jep395RecordCodecProvider@1c3b6963]}, clusterSettings={hosts=[localhost:27017], srvServiceName=mongodb, mode=SINGLE, requiredClusterType=UNKNOWN, requiredReplicaSetName='null', serverSelector='null', clusterListeners='[]', serverSelectionTimeout='30000 ms', localThreshold='30000 ms'}, socketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=0, receiveBufferSize=0, sendBufferSize=0}, heartbeatSocketSettings=SocketSettings{connectTimeoutMS=10000, readTimeoutMS=10000, receiveBufferSize=0, sendBufferSize=0}, connectionPoolSettings=ConnectionPoolSettings{maxSize=100, minSize=0, maxWaitTimeMS=120000, maxConnectionLifeTimeMS=0, maxConnectionIdleTimeMS=0, maintenanceInitialDelayMS=0, maintenanceFrequencyMS=60000, connectionPoolListeners=[], maxConnecting=2}, serverSettings=ServerSettings{heartbeatFrequencyMS=10000, minHeartbeatFrequencyMS=500, serverListeners='[]', serverMonitorListeners='[]'}, sslSettings=SslSettings{enabled=false, invalidHostNameAllowed=false, context=null}, applicationName='null', compressorList=[], uuidRepresentation=JAVA_LEGACY, serverApi=null, autoEncryptionSettings=null, contextProvider=null}
2023-03-24 18:31:52 [cluster-ClusterId{value='641e24d702f21a55236890de', description='null'}-localhost:27017] INFO  org.mongodb.driver.cluster -
				Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=17, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=70897800}
2023-03-24 18:31:54 [main] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration -
				Eureka HTTP Client uses RestTemplate.
2023-03-24 18:31:54 [main] WARN  o.s.c.l.c.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger -
				Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2023-03-24 18:31:54 [main] INFO  o.s.c.n.eureka.InstanceInfoFactory -
				Setting initial instance status as: STARTING
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Initializing Eureka in region us-east-1
2023-03-24 18:31:55 [main] INFO  c.n.d.s.r.aws.ConfigClusterResolver -
				Resolving eureka endpoints via configuration
2023-03-24 18:31:55 [main] WARN  c.n.d.s.r.aws.ConfigClusterResolver -
				Invalid eureka server URI: ${EUREKAURL}/; removing from the server pool
2023-03-24 18:31:55 [main] ERROR c.n.d.s.r.aws.ConfigClusterResolver -
				Cannot resolve to any endpoints from provided configuration: {defaultZone=[${EUREKAURL}/]}
2023-03-24 18:31:55 [main] ERROR c.n.d.s.transport.EurekaHttpClients -
				Initial resolution of Eureka server endpoints failed. Check ConfigClusterResolver logs for more info
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Disable delta property : false
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Single vip registry refresh property : null
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Force full registry fetch : false
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Application is null : false
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Registered Applications size is zero : true
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Application version is -1: true
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Getting all instance registry info from the eureka server
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				DiscoveryClient_BUNDLSERVICE/CA-LH6WN1T3.groupinfra.com:bundlservice:9095 - was unable to refresh its cache! This periodic background refresh will be retried in 30 seconds. status = There is no known eureka server; cluster server list is empty stacktrace = com.netflix.discovery.shared.transport.TransportException: There is no known eureka server; cluster server list is empty
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:108)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1045)
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:958)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:396)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:247)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:242)
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:68)
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:320)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:645)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1324)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1161)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:365)
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:375)
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:179)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:362)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:128)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:116)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:281)
	at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:482)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:702)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$SpringCGLIB$$0.getEurekaClient(<generated>)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:54)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83)
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:178)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:356)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:155)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:123)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:934)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:587)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:310)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1304)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1293)
	at com.cgi.bundleservice.BundleserviceApplication.main(BundleserviceApplication.java:14)

2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Initial registry fetch from primary servers failed
2023-03-24 18:31:55 [main] WARN  c.netflix.discovery.DiscoveryClient -
				Using default backup registry implementation which does not do anything.
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Initial registry fetch from backup servers failed
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Starting heartbeat executor: renew interval is: 30
2023-03-24 18:31:55 [main] INFO  c.n.discovery.InstanceInfoReplicator -
				InstanceInfoReplicator onDemand update allowed rate per min is 4
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Discovery Client initialized at timestamp 1679697115124 with initial instances count: 0
2023-03-24 18:31:55 [main] INFO  o.s.c.n.e.s.EurekaServiceRegistry -
				Registering application BUNDLSERVICE with eureka with status UP
2023-03-24 18:31:55 [main] INFO  c.netflix.discovery.DiscoveryClient -
				Saw local status change event StatusChangeEvent [timestamp=1679697115135, current=UP, previous=STARTING]
2023-03-24 18:31:55 [main] INFO  o.a.coyote.http11.Http11NioProtocol -
				Starting ProtocolHandler ["http-nio-9095"]
2023-03-24 18:31:55 [DiscoveryClient-InstanceInfoReplicator-0] INFO  c.netflix.discovery.DiscoveryClient -
				DiscoveryClient_BUNDLSERVICE/CA-LH6WN1T3.groupinfra.com:bundlservice:9095: registering service...
2023-03-24 18:31:55 [DiscoveryClient-InstanceInfoReplicator-0] WARN  c.netflix.discovery.DiscoveryClient -
				DiscoveryClient_BUNDLSERVICE/CA-LH6WN1T3.groupinfra.com:bundlservice:9095 - registration failed There is no known eureka server; cluster server list is empty
com.netflix.discovery.shared.transport.TransportException: There is no known eureka server; cluster server list is empty
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:108)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-24 18:31:55 [DiscoveryClient-InstanceInfoReplicator-0] WARN  c.n.discovery.InstanceInfoReplicator -
				There was a problem with the instance info replicator
com.netflix.discovery.shared.transport.TransportException: There is no known eureka server; cluster server list is empty
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:108)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:820)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-24 18:31:55 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer -
				Tomcat started on port(s): 9095 (http) with context path ''
2023-03-24 18:31:55 [main] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration -
				Updating port to 9095
2023-03-24 18:31:55 [main] INFO  c.c.b.BundleserviceApplication -
				Started BundleserviceApplication in 8.099 seconds (process running for 9.443)
